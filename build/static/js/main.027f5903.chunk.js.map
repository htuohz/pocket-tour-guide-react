{"version":3,"sources":["Components/MapView.js","Const/urls.js","App.js","reportWebVitals.js","index.js"],"names":["MapView","props","state","center","lat","lng","window","initMap","this","bind","script","document","createElement","src","process","async","body","appendChild","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","map","google","maps","Map","getElementById","zoom","request","location","radius","query","fields","places","PlacesService","textSearch","results","status","PlacesServiceStatus","OK","i","length","createMarker","place","a","url","name","fetch","mode","res","text","marker","Marker","geometry","setMap","infowindow","InfoWindow","setContent","event","addListener","open","console","log","style","height","width","id","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sSAqGiBA,E,kDA9Ff,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAQ,CACXC,OAAO,CACLC,KAAK,UACLC,IAAI,YANQ,E,qDAWlB,WAAoB,IAAD,OACjBC,OAAOC,QAAUC,KAAKD,QAAQE,KAAKD,MACnC,IAAME,EAASC,SAASC,cAAc,UACtCF,EAAOG,IAAP,sDAlBYC,0CAkBZ,sCACAJ,EAAOK,OAAQ,EAEfJ,SAASK,KAAKC,YAAYP,GAS1BQ,UAAUC,YAAYC,oBARJ,SAACC,GACjB,EAAKC,SAAS,CACZnB,OAAQ,CACNC,IAAIiB,EAASE,OAAOC,SACpBnB,IAAIgB,EAASE,OAAOE,kB,qBAQ5B,WACE,IAAIC,EACJA,EAAM,IAAIpB,OAAOqB,OAAOC,KAAKC,IAC3BlB,SAASmB,eAAe,OAAQ,CAAC3B,OAAQK,KAAKN,MAAMC,OAAQ4B,KAAM,KAGpE,IAAMC,EAAU,CACdC,SAAUzB,KAAKN,MAAMC,OACrB+B,OAAQ,OACRC,MAAO,cACPC,OAAO,CAAC,OAAO,aAED,IAAI9B,OAAOqB,OAAOC,KAAKS,OAAOC,cAAcZ,GASpDa,WAAWP,GAPF,SAACQ,EAASC,GACzB,GAAIA,IAAWnC,OAAOqB,OAAOC,KAAKS,OAAOK,oBAAoBC,GAC3D,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQK,OAAQD,IAClCE,EAAaN,EAAQI,OAM3B,IAAME,EAAY,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DAEVC,EAFU,UC3DT,sDD2DS,sCAEqCF,EAAMG,MAF3C,kBAIIC,MAAMF,EAAK,CAACG,KAAM,SAJtB,cAIRC,EAJQ,gBAKKA,EAAIC,OALT,QAKRA,EALQ,WAWJC,EAAS,IAAIjD,OAAOqB,OAAOC,KAAK4B,OAAO,CAC3C9B,IAAKA,EACLL,SAAU0B,EAAMU,SAASxB,YAEpByB,OAAOhC,IACRiC,EAAa,IAAIrD,OAAOqB,OAAOC,KAAKgC,YAC/BC,WAAWd,EAAMG,KAAKI,GACjChD,OAAOqB,OAAOC,KAAKkC,MAAMC,YAAYR,EAAQ,SAAS,WACpDI,EAAWK,KAAKtC,EAAKlB,UAnBb,kDA2BdyD,QAAQC,IAAR,MA3Bc,0DAAF,wD,oBAgClB,WACE,OAEE,aADA,CACA,OAAKC,MAAO,CAAEC,OAAQ,QAASC,MAAO,SAAWC,GAAG,Y,GAzFtCC,aEGPC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzE,SAASmB,eAAe,SAM1B2C,M","file":"static/js/main.027f5903.chunk.js","sourcesContent":["import React,{ Component } from 'react'\nimport { urls } from '../Const'\n\nconst API_KEY = process.env.REACT_APP_MAP_API_KEY\nconst BASE_URL = urls.BASE_URL\n\nclass MapView extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      center:{\n        lat:-41.180557,\n        lng:146.346390\n      }\n    }\n  }\n\n  componentDidMount(){\n    window.initMap = this.initMap.bind(this);\n    const script = document.createElement('script');\n    script.src = `https://maps.googleapis.com/maps/api/js?key=${API_KEY}&libraries=places&callback=initMap`\n    script.async = true;\n\n    document.body.appendChild(script);\n    const getCoords = (position) =>{\n      this.setState({\n        center: {\n          lat:position.coords.latitude,\n          lng:position.coords.longitude\n        }\n      })\n    }\n    navigator.geolocation.getCurrentPosition(getCoords)\n\n  }\n\n  initMap(){\n    let map\n    map = new window.google.maps.Map(\n      document.getElementById('map'), {center: this.state.center, zoom: 15});\n    //const service = new map.PlacesService(map);\n\n    const request = {\n      location: this.state.center,\n      radius: '5000',\n      query: 'attractions',\n      fields:['name','geometry']\n    };\n    const service = new window.google.maps.places.PlacesService(map);\n\n    const callback = (results, status) => {\n      if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n        }\n    }}\n\n    service.textSearch(request, callback);\n\n    const createMarker =async (place) => {\n\n        const url = `${BASE_URL}/api/description/getbyname/${place.name}`\n        try{\n          const res = await fetch(url, {mode: 'cors'})\n          const text = await res.text()\n          // if(err){\n          //   console.log(err)\n          // }\n          //else{\n            if(text){\n              const marker = new window.google.maps.Marker({\n                map: map,\n                position: place.geometry.location\n              });     \n              marker.setMap(map)\n              const infowindow = new window.google.maps.InfoWindow()\n              infowindow.setContent(place.name+text)\n              window.google.maps.event.addListener(marker, 'click', function() { \n                infowindow.open(map, this);\n              });\n            }\n\n          //}\n\n          \n        }catch(e){\n          console.log(e)\n        }\n\n    }\n  }\n    render() {\n      return (\n        // Important! Always set the container height explicitly\n        <div style={{ height: '100vh', width: '100vw' }} id=\"map\">\n        </div>\n      );\n    }\n  }\n  \n  export default MapView;","export default{\n    BASE_URL : \"https://pocket-tour-guide-dotnet.azurewebsites.net/\"\n}\n","import './App.css';\nimport MapView from \"./Components/MapView\"\n\nfunction App() {\n  return (\n    <MapView />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}